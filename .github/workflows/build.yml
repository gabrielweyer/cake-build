name: Build
on:
  push:
    branches:
      - main
    paths-ignore:
      - .editorconfig
      - LICENSE
      - README.md
      - appveyor.yml
      - .circleci/config.yml
      - azure-pipelines.yml
  pull_request:
    branches:
      - main
    paths-ignore:
      - .editorconfig
      - LICENSE
      - README.md
      - appveyor.yml
      - .circleci/config.yml
      - azure-pipelines.yml
jobs:
  Build:
    runs-on: windows-2022
    env:
      CREATE_RELEASE: ${{ github.ref_name == 'main' && !contains(github.event.head_commit.message, '[skip-release]') }}
      CREATE_PRERELEASE: ${{ startsWith(github.ref_name, 'features/') }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install latest .NET SDK
        run: .\build\dotnet-install.ps1
      - name: Restore .NET tools
        run: dotnet tool restore
      - name: Build
        run: |
          dotnet cake build.cake --bootstrap
          dotnet cake build.cake --pack
      - name: Upload NuGet packages
        uses: actions/upload-artifact@v2
        with:
          name: packages
          path: .\artifacts\packages
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v2
        with:
          name: tests-results
          path: .\artifacts\test-results\trx\*.trx
        if: ${{ always() }}
      - name: Report test results
        uses: dorny/test-reporter@v1.5.0
        continue-on-error: true
        if: ${{ always() }}
        with:
          name: Test results
          path: 'artifacts/test-results/trx/*.trx'
          reporter: dotnet-trx
      - name: Create GitHub release on main branch
        if: ${{ env.CREATE_RELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          New-Item empty-release-notes.txt -ItemType file
          gh release create v${{ env.PACKAGE_VERSION }} --title v${{ env.PACKAGE_VERSION }} (Get-Item .\artifacts\packages\*) --target ${{ github.sha }} --repo ${{ github.repository }} --notes-file empty-release-notes.txt
      - name: Create GitHub prerelease on features branches
        if: ${{ env.CREATE_PRERELEASE == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          New-Item empty-release-notes.txt -ItemType file
          gh release create v${{ env.PACKAGE_VERSION }} --title v${{ env.PACKAGE_VERSION }} (Get-Item .\artifacts\packages\*) --target ${{ github.sha }} --repo ${{ github.repository }} --notes-file empty-release-notes.txt --prerelease
      - name: Push NuGet package on main branch
        if: ${{ env.CREATE_RELEASE == 'true' }}
        run: dotnet nuget push .\artifacts\packages\ --source https://www.myget.org/F/gabrielweyer/api/v2/package --api-key ${{ secrets.MYGET_NUGET_RELEASE }} --symbol-source https://www.myget.org/F/gabrielweyer/symbols/api/v2/package
      - name: Push NuGet pre-release package on features branches
        if: ${{ env.CREATE_PRERELEASE == 'true' }}
        run: dotnet nuget push .\artifacts\packages\ --source https://www.myget.org/F/gabrielweyer-pre-release/api/v2/package --api-key ${{ secrets.MYGET_NUGET_PRERELEASE }} --symbol-source https://www.myget.org/F/gabrielweyer-pre-release/symbols/api/v2/package
